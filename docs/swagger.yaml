definitions:
  errs.ErrorModel:
    properties:
      message:
        type: string
      text:
        type: string
      xmlname:
        type: string
    type: object
  passport.ExpirationModel:
    properties:
      daysUntilExpiration:
        type: string
      status:
        type: string
    type: object
  passport.HeaderModel:
    properties:
      CHANGEDATE:
        type: string
      Sequence:
        type: string
      currentWay:
        type: string
      currentWayID:
        type: string
      echName:
        type: string
      echkName:
        type: string
      initialKM:
        type: string
      initialM:
        type: string
      initialMeter:
        type: string
      initialPK:
        type: string
      locationId:
        type: string
      plotLength:
        type: string
      sectionId:
        type: string
      sectionName:
        type: string
      siteId:
        type: string
      suspensionAmount:
        type: string
      text:
        type: string
      wayAmount:
        type: string
      workType:
        type: string
    type: object
  passport.Model:
    properties:
      Header:
        $ref: '#/definitions/passport.HeaderModel'
        type: object
      Towers:
        $ref: '#/definitions/passport.TowersModel'
        type: object
      id:
        type: string
      text:
        type: string
      xmlname:
        type: string
    type: object
  passport.OutputModel:
    properties:
      Expiration:
        $ref: '#/definitions/passport.ExpirationModel'
        type: object
      Header:
        $ref: '#/definitions/passport.HeaderModel'
        type: object
      Towers:
        $ref: '#/definitions/passport.TowersModel'
        type: object
      id:
        type: string
      text:
        type: string
      xmlname:
        type: string
    type: object
  passport.TowerModel:
    properties:
      CountWire:
        type: string
      Gabarit:
        type: string
      RADIUS:
        type: string
      SPEED:
        type: string
      TF_TYPE:
        type: string
      TURN:
        type: string
      WireType:
        type: string
      assetNum:
        type: string
      catenary:
        type: string
      distance:
        type: string
      grounded:
        type: string
      height:
        type: string
      idtf:
        type: string
      km:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      mapper:
        type: string
      number:
        type: string
      offset:
        type: string
      pk:
        type: string
      stopSeq:
        type: string
      suspensionType:
        type: string
      text:
        type: string
      zigzag:
        type: string
    type: object
  passport.TowersModel:
    properties:
      TowerModel:
        items:
          $ref: '#/definitions/passport.TowerModel'
        type: array
      sectionID:
        type: string
      text:
        type: string
    type: object
  routers.InformationRouteModel:
    properties:
      car:
        type: string
      carID:
        type: string
      description:
        type: string
      eigthnum:
        type: string
      masterPmNum:
        type: string
      text:
        type: string
      tripChangeData:
        type: string
      tripType:
        type: string
      viksRouteID:
        type: string
      xmlname:
        type: string
    type: object
  routers.ListRoutesModel:
    properties:
      routeModel:
        items:
          $ref: '#/definitions/routers.InformationRouteModel'
        type: array
      xmlname:
        type: string
    type: object
  routers.RouteModel:
    properties:
      car:
        type: string
      carID:
        type: string
      description:
        type: string
      eigthnum:
        type: string
      masterPmNum:
        type: string
      sectionSetModel:
        $ref: '#/definitions/routers.SectionSetModel'
        type: object
      text:
        type: string
      tripChangeData:
        type: string
      tripType:
        type: string
      viksRouteID:
        type: string
      xmlname:
        type: string
    type: object
  routers.RoutePassportsModel:
    properties:
      passports:
        items:
          $ref: '#/definitions/passport.Model'
        type: array
      viksRouteID:
        type: string
      xmlname:
        type: string
    type: object
  routers.SectionModel:
    properties:
      changeData:
        type: string
      sectionId:
        type: string
      sectionName:
        type: string
      sequence:
        type: string
      siteId:
        type: string
      text:
        type: string
      workType:
        type: string
    type: object
  routers.SectionSetModel:
    properties:
      section:
        items:
          $ref: '#/definitions/routers.SectionModel'
        type: array
      text:
        type: string
    type: object
host: localhost:80
info:
  contact: {}
  description: Store server for passports and routes.
  license: {}
  title: Passports and Routes of railways store server
  version: "1.0"
paths:
  /:id:
    get:
      description: return route object by route id or error if there is not one
      parameters:
      - description: route ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routers.RouteModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorModel'
      summary: GetRouteByID
      tags:
      - routes
  /:id/passports:
    get:
      description: return all passports are belonged the route
      parameters:
      - description: route ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routers.RoutePassportsModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorModel'
      summary: GetRoutePassports
      tags:
      - routes
  /:passportId:
    get:
      description: return passport by ID from database if there is one, or return
        error object with status code 200
      parameters:
      - description: passport ID
        in: path
        name: passportId
        required: true
        type: string
      produces:
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.OutputModel'
      summary: GetPassportByID
      tags:
      - passports
  /:passportId/towers:
    get:
      description: return all towers of passport by id
      parameters:
      - description: passport ID
        in: path
        name: passportId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.TowersModel'
      summary: GetTowersOfPassport
      tags:
      - towers
  /:passportId/towers/:towerId:
    get:
      description: return certain tower of the passport by ID
      parameters:
      - description: passport ID
        in: path
        name: passportId
        required: true
        type: string
      - description: tower ID
        in: path
        name: towerId
        required: true
        type: string
      produces:
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.TowerModel'
      summary: GetPassportTowerByID
      tags:
      - towers
  /:passportId/towers/findtower:
    get:
      description: return the closest tower belonged the passport by coordinates
      parameters:
      - description: latitude
        in: query
        name: latitude
        required: true
        type: number
      - description: longitude
        in: query
        name: longitude
        required: true
        type: number
      produces:
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.TowerModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorModel'
      summary: FindTowerByCoordinate
      tags:
      - towers
  /all:
    get:
      description: return all routes from database
      produces:
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routers.ListRoutesModel'
      summary: GetAllRoutes
      tags:
      - routes
  /passport:
    post:
      consumes:
      - multipart/form-data
      - text/xml
      description: save passport in database
      parameters:
      - description: xml structure of passport or zip archive of xml files
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/passport.Model'
      produces:
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.OutputModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorModel'
      summary: SavePassport
      tags:
      - passports
  /route:
    post:
      consumes:
      - text/xml
      description: Save route in database
      parameters:
      - description: xml doc of route
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/routers.RouteModel'
      produces:
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routers.RouteModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorModel'
      summary: Save
      tags:
      - routes
swagger: "2.0"
