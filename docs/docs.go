// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/:passportId": {
            "get": {
                "description": "return passport by ID from database if there is one, or return error object with status code 200",
                "tags": [
                    "passports"
                ],
                "summary": "GetPassportByID",
                "responses": {
                    "200": {
                        "description": "if there is not passport with the ID",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorModel"
                        }
                    }
                }
            }
        },
        "/:passportId/towers": {
            "get": {
                "description": "return all towers of passport by id",
                "tags": [
                    "towers"
                ],
                "summary": "GetTowersOfPassport",
                "responses": {
                    "200": {
                        "description": "if there is not passport with ID",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorModel"
                        }
                    }
                }
            }
        },
        "/:passportId/towers/:towerId": {
            "get": {
                "description": "return certain tower of the passport by ID",
                "tags": [
                    "towers"
                ],
                "summary": "GetPassportTowerByID",
                "responses": {
                    "200": {
                        "description": "if there is not passport or tower with ID",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorModel"
                        }
                    }
                }
            }
        },
        "/:passportId/towers/findtower": {
            "get": {
                "description": "return the closest tower belonged the passport by coordinates",
                "tags": [
                    "towers"
                ],
                "summary": "FindTowerByCoordinate",
                "parameters": [
                    {
                        "type": "number",
                        "description": "latitude",
                        "name": "latitude",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "longitude",
                        "name": "longitude",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorModel"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errs.ErrorModel": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "xmlname": {
                    "type": "string"
                }
            }
        },
        "passport.ExpirationModel": {
            "type": "object",
            "properties": {
                "daysUntilExpiration": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "passport.HeaderModel": {
            "type": "object",
            "properties": {
                "CHANGEDATE": {
                    "type": "string"
                },
                "Sequence": {
                    "type": "string"
                },
                "currentWay": {
                    "type": "string"
                },
                "currentWayID": {
                    "type": "string"
                },
                "echName": {
                    "type": "string"
                },
                "echkName": {
                    "type": "string"
                },
                "initialKM": {
                    "type": "string"
                },
                "initialM": {
                    "type": "string"
                },
                "initialMeter": {
                    "type": "string"
                },
                "initialPK": {
                    "type": "string"
                },
                "locationId": {
                    "type": "string"
                },
                "plotLength": {
                    "type": "string"
                },
                "sectionId": {
                    "type": "string"
                },
                "sectionName": {
                    "type": "string"
                },
                "siteId": {
                    "type": "string"
                },
                "suspensionAmount": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "wayAmount": {
                    "type": "string"
                },
                "workType": {
                    "type": "string"
                }
            }
        },
        "passport.Model": {
            "type": "object",
            "properties": {
                "Expiration": {
                    "type": "object",
                    "$ref": "#/definitions/passport.ExpirationModel"
                },
                "Header": {
                    "type": "object",
                    "$ref": "#/definitions/passport.HeaderModel"
                },
                "Towers": {
                    "type": "object",
                    "$ref": "#/definitions/passport.TowersModel"
                },
                "id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "xmlname": {
                    "type": "string"
                }
            }
        },
        "passport.TowerModel": {
            "type": "object",
            "properties": {
                "CountWire": {
                    "type": "string"
                },
                "Gabarit": {
                    "type": "string"
                },
                "RADIUS": {
                    "type": "string"
                },
                "SPEED": {
                    "type": "string"
                },
                "TF_TYPE": {
                    "type": "string"
                },
                "TURN": {
                    "type": "string"
                },
                "WireType": {
                    "type": "string"
                },
                "assetNum": {
                    "type": "string"
                },
                "catenary": {
                    "type": "string"
                },
                "distance": {
                    "type": "string"
                },
                "grounded": {
                    "type": "string"
                },
                "height": {
                    "type": "string"
                },
                "idtf": {
                    "type": "string"
                },
                "km": {
                    "type": "string"
                },
                "latitude": {
                    "type": "string"
                },
                "longitude": {
                    "type": "string"
                },
                "mapper": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                },
                "offset": {
                    "type": "string"
                },
                "pk": {
                    "type": "string"
                },
                "stopSeq": {
                    "type": "string"
                },
                "suspensionType": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "zigzag": {
                    "type": "string"
                }
            }
        },
        "passport.TowersModel": {
            "type": "object",
            "properties": {
                "TowerModel": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/passport.TowerModel"
                    }
                },
                "sectionID": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:80",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Passports and Routes of railways store server",
	Description: "Store server for passports and routes.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
